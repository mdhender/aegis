/*
 *	aegis - project change supervisor
 *	This file is in the Public Domain, 1995, 1998, 2000, 2002 Peter Miller.
 *
 * MANIFEST: example of using rcs in the project config file
 *
 * The entries for the commands are listed below.  RCS uses a slightly
 * different model than aegis wants, so some maneuvering is required.
 * The command strings in this section assume that the RCS commands ci
 * and co and rcs and rlog are in the command search PATH, but you may
 * like to hard-wire the paths, or set PATH at the start of each.  You
 * should also note that the strings are always handed to the Bourne
 * shell to be executed, and are set to exit with an error immediately a
 * sub-command fails.
 *
 * In these commands, the RCS file is kept unlocked, since only the
 * owner will be checking changes in.  The RCS functionality for
 * coordinating shared access is not required.
 *
 * One advantage of using RCS version 5.6 or later is that binary files
 * are supported, should you want to have binary files in the baseline.
 *
 * The ${quote ...} construct is used to quote filenames which contain
 * shell special characters.  A minimum of quoting is performed, so if
 * the filenames do not contain shell special characters, no quotes will
 * be used.
 */

/*
 * This command is used to create a new file history.
 * This command is always executed as the project owner.
 * The following substitutions are available:
 *
 * ${Input}
 *	absolute path of the source file
 * ${History}
 *	absolute path of the history file
 *
 * The "ci -u" option is used to specify that an unlocked copy will remain in
 *	the baseline.
 * The "ci -d" option is used to specify that the file time rather than the
 *	current time is to be used for the new revision.
 * The "ci -M" option is used to specify that the mode date on the original
 *	file is not to be altered.
 * The "ci -t" option is used to specify that there is to be no description
 *	text for the new RCS file.
 * The "ci -m" option is used to specify that the change number is to be stored
 *	in the file log if this is actually an update (typically from aenf
 *	after aerm on the same file name).
 * The "ci -w" option is used to specify the user name at checkin,
 *	since this is always run by the project owner, and we almost
 *	always want to know the developer.
 * The "rcs -U" option is used to specify that the new RCS file is to have
 *	unstrict locking.
 *
 * It is essential that the history_put_command be identical to the
 * the history_create_command for branching to work correctly.
 */
history_create_command =
	"ci -u -d -M -m${quote ($version) ${change description}} \
-w$developer \
-t/dev/null ${quote $input} ${quote $history,v}; \
rcs -U ${quote $history,v}";


/*
 * This command is used to get a specific edit back from history.
 * This command is always executed as the project owner.
 * The following substitutions are available:
 *
 * ${History}
 *	absolute path of the history file
 * ${Edit}
 *	edit number, as given by history_\%query_\%command
 * ${Output}
 *	absolute path of the destination file
 *
 * The "co -r" option is used to specify the edit to be retrieved.
 * The "co -p" option is used to specify that the results be printed on the
 *	standard output; this is because the destination filename will never
 *	look anything like the history source filename.
 */
history_get_command =
	"co -r${quote $edit} -p ${quote $history,v} > ${quote $output}";

/*
 * This command is used to add a new "top-most" entry to the history file.
 * This command is always executed as the project owner.
 * The following substitutions are available:
 *
 * ${Input}
 *	absolute path of source file
 * ${History}
 *	absolute path of history file
 *
 * The "ci -f" option is used to specify that a copy is to be checked-in even
 *	if there are no changes.
 * The "ci -u" option is used to specify that an unlocked copy will remain in
 *	the baseline.
 * The "ci -d" option is used to specify that the file time rather than the
 *	current time is to be used for the new revision.
 * The "ci -M" option is used to specify that the mode date on the original
 *	file is not to be altered.
 * The "ci -m" option is used to specify that the change number is to be stored
 *	in the file log, which allows rlog to be used to find the change
 *	numbers to which each revision of the file corresponds.
 * The "ci -w" option is used to specify the user name at checkin,
 *	since this is always run by the project owner, and we almost
 *	always want to know the developer.
 *
 * It is essential that the history_put_command be identical to the
 * the history_create_command for branching to work correctly.
 */
history_put_command =
	"ci -u -d -M -m${quote ($version) ${change description}} \
-w$developer \
-t/dev/null ${quote $input} ${quote $history,v}; \
rcs -U ${quote $history,v}";

/*
 * This command is used to query what the history mechanism calls the top-most
 * edit of a history file.  The result may be any arbitrary string, it need not
 * be anything like a number, just so long as it uniquely identifies the edit
 * for use by the history_get_command at a later date.  The edit number is to
 * be printed on the standard output.  This command is always executed as the
 * project owner.
 *
 * The following substitutions are available:
 *
 * ${History}
 *	absolute path of the history file
 */
history_query_command =
	"rlog -r ${quote $history,v} | awk '/^revision/ {print $$2}'";

/*
 * Compare three files using merge(1).  Conflicts are marked in the output.
 *
 * This command is used by aed(1) to produce a difference listing when a file
 * in the development directory is out of date compared to the current version
 * in the baseline.
 *
 * All of the command substitutions described in aesub(5) are available.
 * In addition, the following substitutions are also available:
 *
 * ${ORiginal}
 *	The absolute path name of a file containing the common ancestor
 *	version of ${MostRecent} and {$Input}.  Usually the version originally
 *	copied into the change.  Usually in a temporary file.
 * ${Most_Recent}
 *	The absolute path name of a file containing the most recent version.
 *	Usually in the baseline.
 * ${Input}
 *	The absolute path name of the edited version of the file.  Usually in
 *	the development directory.
 * ${Output}
 *	The absolute path name of the file in which to write the difference
 *	listing.  Usually in the development directory.
 *
 * An exit status of 0 means successful, even of the files differ (and they
 * usually do).  An exit status which is non-zero means something is wrong.
 *
 * The "merge -L" options are used to specify labels for the baseline and the
 *	development directory, respectively, when conflict lines are inserted
 *	into the result.
 * The "merge -p" options is used to specify that the results are to be printed
 *	on the standard output.
 */

merge_command =
	"set +e; "
	"merge -p -L baseline -L Historical -L C$c "
	    "${quote $mostrecent} ${quote $original} ${quote $input} "
	    "> ${quote $output}; "
	"test $? -le 1";

/*
 * Many history tools (including RCS) can modify the contents of the file
 * when it is committed.  While there are usually options to turn this
 * off, they are seldom used.  The problem is: if the commit changes the
 * file, the source in the repository now no longer matches the object
 * file in the repository - i.e. the history tool has compromised the
 * referential integrity of the repository.
 *
 * If you use RCS keyword substitution, you will need this next line.
 * (The default is to report a fatal error.)
 */
history_put_trashes_file = warn;
