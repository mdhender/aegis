/*
 *	aegis - project change supervisor
 *	Copyright (C) 1991, 1992, 1993, 1994 Peter Miller.
 *	All rights reserved.
 *
 *	This program is free software; you can redistribute it and/or modify
 *	it under the terms of the GNU General Public License as published by
 *	the Free Software Foundation; either version 2 of the License, or
 *	(at your option) any later version.
 *
 *	This program is distributed in the hope that it will be useful,
 *	but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *	GNU General Public License for more details.
 *
 *	You should have received a copy of the GNU General Public License
 *	along with this program; if not, write to the Free Software
 *	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 * MANIFEST: change state file contents definition
 *
 * if you cange this file, don't forget to change
 *	man5/aecstate.5
 */

#include <cattr.def>

state =
(
	/*
	 * The change has been created,
	 * but has yet to be worked on.
	 */
	awaiting_development,

	/*
	 * The change is being developed.
	 */
	being_developed,

	/*
	 * The change has been developed,
	 * and is being reviewed.
	 * (There is no 'awaiting_review' state.)
	 */
	being_reviewed,

	/*
	 * The change has passed review,
	 * and is queued ready for integration.
	 */
	awaiting_integration,

	/*
	 * The change is being integrated.
	 */
	being_integrated,

	/*
	 * The change has been completed and is now
	 * part of the baseline.
	 * Changes in this state can not be reversed.
	 */
	completed
);

/*
 * This field records the delta number for this change.
 * It is only present if the change is in one of
 * the 'being_integrated' or 'completed' states.
 */
delta_number = integer;

/*
 * This field records the last change integrated into the project.
 * If it disagrees with the project, a 'project_file_command' (from pconf)
 * needs to be executed at the next build.
 */
project_file_command_sync = integer;

/*
 * This field records the time the last successful
 * 'aegis -Build' command was run for all architectures.
 * It is only present in the 'being_developed' and 'being_integrated' states.
 */
build_time = time;

/*
 * This field records the time the last successful
 * 'aegis -Test' command was run for all architectures.
 * It is only present in the 'being_developed' and 'being_integrated' states.
 */
test_time = time;

/*
 * This field records the time the last successful
 * 'aegis -Test -BaseLine' command was run for all architectures.
 * It is only present in the 'being_developed' and 'being_integrated' states.
 */
test_baseline_time = time;

/*
 * This field records the time the last successful
 * 'aegis -Test -Regression' command was run for all architectures.
 * It is only present in the 'being_developed' and 'being_integrated' states.
 */
regression_test_time = time;

/*
 * This field records the time of various operations for each variant named
 * in the "architecture" field.
 * It is only present in the 'being_developed' and 'being_integrated' states.
 */
architecture_times =
[
    {
	/*
	 * This field is one of the patterns named in
	 * the outer "architecture" field.
	 */
	variant = string;

	/*
	 * This field is the computer on which the command was run
	 * which last changed this structure.
	 */
	node = string;

	/*
	 * This field records the last time the last
	 * successful 'aegis -Build' command
	 * was run for this specific architecture variant.
	 */
	build_time = time;

	/*
	 * This field records the last time the last
	 * successful 'aegis -Test' command
	 * was run for this specific architecture variant.
	 */
	test_time = time;

	/*
	 * This field records the last time the last
	 * successful 'aegis -Test -BaseLine' command
	 * was run for this specific architecture variant.
	 */
	test_baseline_time = time;

	/*
	 * This field records the last time the last
	 * successful 'aegis -Test -REGression' command
	 * was run for this specific architecture variant.
	 */
	regression_test_time = time;
    }
];

/*
 * This field is the absolute path of the change's development directory.
 * It is only present of the change is in a state
 * between 'being_developed' and 'being_integrated' inclusive.
 */
development_directory = string;

/*
 * This field is the absolute path of the change's integration directory.
 * It is only present of the change is in the 'being_integrated' state.
 */
integration_directory = string;

/*
 * This field records the history of the change,
 * in the form of state transitions.
 */
history = 
[
	{
		/*
		 * This field records the time the state transition occured.
		 */
		when = time;

		/*
		 * This field records what happened.
		 * Valid value names echo the various aegis functions.
		 */
		what =
		(
			new_change,
			develop_begin,
			develop_begin_undo,
			develop_end,
			develop_end_undo,
			review_pass,
			review_pass_undo,
			review_fail,
			integrate_begin,
			integrate_begin_undo,
			integrate_pass,
			integrate_fail
		);

		/*
		 * This field records the user name of the user who
		 * caused the state transition.
		 */
		who = string; /* the user name */

		/*
		 * This field is optional.
		 * It is a comment of some sort.
		 * In the cause of review_file and integrate_fail,
		 * this field will contain why the change failed.
		 */
		why = string;
	}
];

/*
 * This field is a list of all the files in the change.
 */
src =
[
	{
		/*
		 * This file names the file.
		 * The name is relative to the root of the
		 * baseline directory tree.
		 */
		file_name = string;

		/*
		 * This field describes what is being done with the file.
		 */
		action = file_action;

		/*
		 * This field records the edit number of the file
		 * when it was added to the change (or updated using the
		 * 'aegis -DIFFerence' command).
		 * This field is not present for new files.
		 */
		edit_number = string;

		/*
		 * This field describes what function the file serves.
		 */
		usage = file_usage;

		/*
		 * These fields are set by a successful
		 * 'aegis -DIFFerence' command to the last-time-modified
		 * of the source file and the difference listing.
		 * It is only present between the 'being_developed' and
		 * 'being_integrated' states, inclusive.
		 * This allows checking that the files have not been modified
		 * at the develop_end, review_pass and integrate_begin
		 * state transitions.
		 */
		diff_time = time;
		diff_file_time = time;

		/*
		 * To change the name of a file,
		 * a combination of aerm and aenf are used.
		 * With deleted files, this field is used to say where it went.
		 * With new files, this field is used to say where it came from.
		 */
		move = string;
	}
];
