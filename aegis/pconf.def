/*
 *	aegis - project change supervisor
 *	Copyright (C) 1991, 1992, 1993, 1994, 1995 Peter Miller;
 *	All rights reserved.
 *
 *	This program is free software; you can redistribute it and/or modify
 *	it under the terms of the GNU General Public License as published by
 *	the Free Software Foundation; either version 2 of the License, or
 *	(at your option) any later version.
 *
 *	This program is distributed in the hope that it will be useful,
 *	but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *	GNU General Public License for more details.
 *
 *	You should have received a copy of the GNU General Public License
 *	along with this program; if not, write to the Free Software
 *	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 * MANIFEST: project config file contents definition
 *
 * this file normally resides at "projdir"/baseline/config
 *
 * this file is only ever read by [me], so does not need locking.
 * Indeed, it is in the baseline, and subject to history.
 *
 * if you change this file, don't forget to change
 *	man5/aepconf.5
 */

#include <common.def>

/*
 * how to build the project
 *	(actually, how to do an integration build)
 * mandatory
 *
 * All of the substitutions described in aesub(5) are available.
 */
build_command = string;

/*
 * how to do a development build
 * defaults to above
 *
 * All of the substitutions described in aesub(5) are available.
 */
development_build_command = string;

/*
 * Executed whenever the files in the change, change.
 *
 * All of the substitutions described in aesub(5) are available.
 * In addition:
 *
 * ${File_List}
 *	 space separated list of files named
 */
change_file_command = string;

/*
 * Executed at development build before 'development_build_command' when
 *	(a)	it is the first build after a develop begin, or
 *	(b)	after some other change has been integrated into the baseline
 *		since the last build.
 *
 * All of the substitutions described in aesub(5) are available.
 */
project_file_command = string;

/*
 * Executed at develop begin
 *
 * All of the substitutions described in aesub(5) are available.
 */
develop_begin_command = string;

/*
 * Executed at integrate begin
 *
 * All of the substitutions described in aesub(5) are available.
 */
integrate_begin_command = string;

/*
 * This flag is true if aegis should link the files from the baseline
 * into the integration directory, rther than copy them (the default).
 * This has risks, as the build script (e.g. Howto.cook or Makefile, etc)
 * must unlink targets before rebuilding them.
 */
link_integration_directory = boolean;

/*
 * This flag is true if aegis should create symlinks from the
 * development directory to the baseline for all files in the baseline
 * not in the development directory immediately before a
 * development_build_command is issued.  Usually use to trick dumb DMTs
 * into believeing the development directory contains an entire copy of
 * the project, though sometimes the DMT is smart enough, the tools is
 * must work with are not.  Symlinks in the development directory which
 * point to nonexistent files will be removed.
 */
create_symlinks_before_build = boolean;

/*
 * This flag is true if aegis should remove symlinks which point from
 * the development directory to the baseline directory immediately
 * after a development_build_command is issued.  Only consulted if
 * the create_symlinks_before_build field is true, for the porpose of
 * reversing the actions of the create_symlinks_before_build field.
 */
remove_symlinks_after_build = boolean;

/*
 * This field is used to name specific files for which symbolic links
 * must not be made between the development directory and the baseline.
 * These are usually state files for various tools.
 */
symlink_exceptions = [ string ];

/*
 * the history commands are pretty dicey to have here,
 * because a project could be badly broken if these don't work just right!
 * On the other hand, they need to be changed from time to time.
 */

/*
 * create a new history
 * always executed as the project owner
 * All of the substitutions described in aesub(5) are available.
 * In addition:
 *
 * ${Input}
 *	absolute path of the source file
 *
 * ${History}
 *	absolute path of the history file
 */
history_create_command = string;

/*
 * get a file from history
 * may be executed by developers
 * All of the substitutions described in aesub(5) are available.
 * In addition:
 *
 * ${History}
 *	absolute path of the history file
 *
 * ${Edit}
 *	edit number to be extracted (artibrary string)
 *
 * ${Output}
 *	Absolute path of output file.
 */
history_get_command = string;

/*
 * add a new change to the history
 * always executed as the project owner
 * All of the substitutions described in aesub(5) are available.
 * In addition:
 *
 * ${Input}
 *	absolute path of the source file
 *
 * ${History}
 *	absolute path of the history file
 */
history_put_command = string;

/*
 * query the topmost edit of a history file
 * Result to be printed on stdout.
 * may be executed by developers
 * All of the substitutions described in aesub(5) are available.
 * In addition:
 *
 * ${History}
 *	absolute path of the history file
 */
history_query_command = string;

/*
 * difference of 2 files
 * All of the substitutions described in aesub(5) are available.
 * In addition:
 *
 * ${ORiginal}
 *	absolute path of file in baseline (usually)
 *
 * ${Input}
 *	absolute path of file in development directory (usually)
 *
 * ${Output}
 *	Absolute path of output file
 */
diff_command = string;

/*
 * difference of 3 files
 * All of the substitutions described in aesub(5) are available.
 * In addition:
 *
 * ${ORiginal}
 *	Absolute path of common ancestor
 *
 * ${Most_Recent}
 *	Absolute path of competing edit, usually in the baseline.
 *
 * ${Input}
 *	absolute path of file in development directory (usually)
 *
 * ${Output}
 *	absolute path of output file
 */
diff3_command = string;

/*
 * This field is used to set the command to be executed by 'aegis -test'.
 * Defaults to "$shell $filename" if not set.
 *
 * All of the substitutions described in aesub(5) are available,
 * In addition:
 *
 * ${File_Name}
 *	the absolute path of the test to be executed.
 *
 * Note that tests are source files, and thus never have the execute bit set.
 */
test_command = string;

/*
 * This field is used to set the command to be executed by 'aegis
 * -test' by a developer.  Defaults to be the same as the
 * test_command field if not set.  It is a significantly bad idea to
 * make tests behave differently in development tests and integration
 * tests; avoid this at all costs.
 *
 * All of the substitutions described in aesub(5) are available,
 * In addition:
 *
 * ${File_Name}
 *	the absolute path of the test to be executed.
 *
 * Note that tests are source files, and thus never have the execute bit set.
 */
development_test_command = string;

/*
 * This is a list of system and machine architectures on which each
 * change must successfully build and test.
 */
architecture =
[
	{
		/*
		 * The name of an architecture.  Available as the
		 * ${ARCHitecture} substitution, the AEGIS_ARCH
		 * environment variable, and listed in the architecture
		 * field of the cattr/cstate file.
		 */
		name = string;

		/*
		 * A pattern in the form "sysname-release-version-machine".
		 * Normal filename matching wildcards may be used.
		 */
		pattern = string;
	}
];

/*
 * new file templates
 */
file_template =
[
	{
		pattern = [ string ];
		body = string;
	}
];

/*
 * This field is used to limit the length of filenames.  All new files
 * may not have path components longer than this.  Existing files are not
 * affected.  The last component must also allow for the ",D" suffix of
 * difference files.  Where this value is larger than the file system
 * allows, the file system limit will be imposed.
 * Defaults to 14 if not set.
 */
maximum_filename_length = integer;

/*
 * This field may be used to limit the characters allowed
 * in filenames to only those explicitly allowed by POSIX.
 * Defaults to false if not set.
 *
 * For a filename to be portable across conforming implementations of
 * IEEE Std 1003.1-1988, it shall consist only of alphanumeric
 * characters, dot, hyphen or underscore.  Hyphen shall not be used
 * as the first character of a portable filename.
 *
 * If this field is false, all characters are allowed
 * except non-printing characters, space characters and leading hypens.
 */
posix_filename_charset = boolean;

/*
 * This field may be used to limit filesnames so that they conform to
 * the DOS 8+3 filename limits and to the DOS filename character set.
 * Defaults to false if not set.  This field is used in combination
 * with the other filename fields, it does not replace them.
 */
dos_filename_required = boolean;

/*
 * This field is used to specify a list of patterns of acceptable
 * filenames.  The patterns are constructed from the usual shell
 * filename wildcards.  Defaults to "*" if not set.
 */
filename_pattern_accept = [ string ];

/*
 * This field is used to specify a list of patterns of unacceptable
 * filenames.  The patterns are constructed from the usual shell
 * filename wildcards.  Defaults to "*,D" if not set.  The pattern
 * "*,D" is always appended.
 *
 * Where the filename_pattern_accept and filename_pattern_reject fields
 * conflict, the reject takes precedence.
 */
filename_pattern_reject = [ string ];
