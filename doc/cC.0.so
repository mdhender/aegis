.\"
.\"	aegis - project change supervisor
.\"	Copyright (C) 1993 Peter Miller.
.\"	All rights reserved.
.\"
.\"	This program is free software; you can redistribute it and/or modify
.\"	it under the terms of the GNU General Public License as published by
.\"	the Free Software Foundation; either version 2 of the License, or
.\"	(at your option) any later version.
.\"
.\"	This program is distributed in the hope that it will be useful,
.\"	but WITHOUT ANY WARRANTY; without even the implied warranty of
.\"	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\"	GNU General Public License for more details.
.\"
.\"	You should have received a copy of the GNU General Public License
.\"	along with this program; if not, write to the Free Software
.\"	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
.\"
.\" MANIFEST: User Guide, Appendix C, Product Comparisons
.\"
.bp
.2C
.nh 1 "Appendix C: Product Comparisons"
.LP
This appendix compares the aegis program with other pieces of software.
Only a few work in the same area as the aegis program,
or a commonly compared to the aegis program.
.nh 2 "CVS"
.LP
A comparison with CVS (Concurrent Version System) is frequently requested.
.LP
A fast comparison can be made by saying that
.I "CVS is over RCS"
and that
.I "aegis is over RCS and make."
This is a very simplistic view,
but it illustrates the fact that aegis has a wider scope than make.
While CVS covers a subset of the functionality covered by aegis,
it natuarally does that subset better.
.LP
The model used by aegis has a baseline
.I and
a repository.
The baseline is all of the most up to date source file
.B plus
all the implications flowing from those source files,
such as object files and executable programs or libraries.
This means there is always an "official" executable present,
representing the progress made by the project at that very instant.
These source files are available for linking or inclusion,
the object files available for linking,
at no extra effort for the developers.
.LP
The reporitory is only for history,
using the aegis model.  It is used to store everything that has happened,
so that developers may receraete earlier version when fixing bugs,
and aegis may use it for some other purposes.
.LP
CVS provides the repository functionality well.
It provides branching nicely,
and it has symbolic file sets.
While is does not provide a baseline,
it does not prevent a project implementing it in some other fashion.
.LP
The existence of the baseline for aegis is what limits branching.
The semantics of branching in the repository would appear to imply
that a (logically) separate baseline is required for each leaf in
the history tree.
This is why aegis only provides branching without the possibility of merging,
by deriving a whole new project from an existing one;
thus creating a whole new baseline as well.
Should a better set of semantics be made aparrent,
this is certainly an area for improvement.
.LP
Another aspect of Software Configuration Management (SCM) is
consistency checking.
For example,
if two developers are working on two (logically) separate changes,
which both need to alter the same file,
one of them will inevitably return it to the baseline first,
and the other will then be working on an out of date copy.
Both aegis is CVS provide a conflict resolution mechanism to handle this;
the same algorithm is used by both,
although implemented a little differently in each case.
.LP
There is a second aspect to consistency checking required by SCM;
it is important that a change does not "break" the project,
and it is thus important that all the source files in the project
agree with each other.
For example,
if a developer alters an include file as part of a change,
and the portion of this include file describing a function
prototype is changed,
it is essential that all of the clients of that function be recompiled,
to ensure that they are still compatible with that prototype,
and may need to be included with the change to update their use of
the function.
Similarly,
the definition of the function needs to be recompiled,
to ensure that it, too, agrees with the prototype,
and have the interface and 9implementation changed to agree with it.
This type of consistency checking is provided by aegis,
but not bu CVS;
although CVS does not prevent a project implementing this in a different way.
.LP
Another aspect of SCM provided by aegis is validation.
The aegis program insists that changes be accompanied by tests.
This allows greater confidence that a change actually works,
and the accumulation of such tests provides a regression test suite to verify
that later changes do not "break" the functionality provided by this one.
The aegis program also insists that each change be reviewed;
by whom is configurable.
While testing is not a silver bullet,
and neither is peer review,
both are vital components producing quality software.
CVS does not provide validation functionality;
althoug it does not prevent a project from implementing this in some other way.
.LP
The CVS program aims to provide the repository function for SCM,
and it does this well.
The
aegis program aims to provide a baseline,
to provide a reporitory,
to provide baseline consistency, and
to provide baseline change validation.
There are situations where one is more suited,
and the other less, and vice versa.
The tools selected for a project,
from Gandt charts to assemblers,
must be chosen for their "fit" with each individuat project.
.PP
Another point to note is that CVS requires RCS;
whereas aegis may be configured to use almost any history tool.
If SCCS is bundled with your operating system,
or your company has its own history tool,
aegis can be configured to use that, instead.
.1C
