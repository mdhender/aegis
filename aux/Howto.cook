/*
 *	aegis - project change supervisor
 *	Copyright (C) 1991, 1992, 1993, 1994, 1995 Peter Miller;
 *	All rights reserved.
 *
 *	This program is free software; you can redistribute it and/or modify
 *	it under the terms of the GNU General Public License as published by
 *	the Free Software Foundation; either version 2 of the License, or
 *	(at your option) any later version.
 *
 *	This program is distributed in the hope that it will be useful,
 *	but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *	GNU General Public License for more details.
 *
 *	You should have received a copy of the GNU General Public License
 *	along with this program; if not, write to the Free Software
 *	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 * MANIFEST: instructions to cook(1), how to build project
 */

/*
 * Turn on updating to ensure mod-time
 * consistency on fast machines.
 */
set update;

/*
 * You may want to change some of these options.
 * ([debug] must be defined, even if empty, use comments.)
 *
 * Change ``main.h'' to add the DEBUG define.
 * All files reference this file, so this will cause recompilation
 * of all files, both in the change and in the baseline.
 */
debug = /* -g */ ;

/*
 * Make sure the [project], [change], [version] and [arch] variables are set.
 */
#ifndef project
echo "The [project] variable was not set from the command line." set silent;
echo "If you want to do a build which is not a development build" set silent;
echo "or an integration build, use the make command, not cook." set silent;
fail;
#endif
#ifndef change
echo "The [change] variable was not set from the command line." set silent;
echo "If you want to do a build which is not a development build" set silent;
echo "or an integration build, use the make command, not cook." set silent;
fail;
#endif
#ifndef version
echo "The [version] variable was not set from the command line." set silent;
echo "If you want to do a build which is not a development build" set silent;
echo "or an integration build, use the make command, not cook." set silent;
fail;
#endif
#ifndef arch
echo "The [arch] variable was not set from the command line." set silent;
echo "If you want to do a build which is not a development build" set silent;
echo "or an integration build, use the make command, not cook." set silent;
fail;
#endif

arch_ed = -e "'s|^"[arch]/"|[arch]/|'" ;
baseline_ed = ;

/*
 * If this is a development build, the version will be x.y.Czzz,
 * so look to see if there is a C in the version string.
 * Include the baseline in the search path if this is
 * a development build.
 */
if [match_mask %1C%2 [version]] then
{
	/*
	 * The develop_begin_command in the config file
	 * always creates the "bl" symbolic link.
	 */
	/* baseline = [collect aegis -cd -bl -p [project]]; */
	baseline = bl;
	search_list = . [baseline];
	baseline_ed = -e "'s|^"[baseline]/"||'" ;
}

/*
 * determine the short version:
 * no change or delta number
 */
version_short = [fromto %1.%2.%3 %1.%2 [version]];


/*
 * This file is generated by autoconf.
 * It is architecture specific.
 * If it is not found (not cooked yet) the following
 * symbols will be undefined.
 *
 *	Must be included *after* the search_list is defined.
 */
#include-cooked [arch]/aux/Howto.conf
if [not [defined prefix]] then
	prefix = /usr/local;
if [not [defined exec_prefix]] then
	exec_prefix = [prefix];
if [not [defined AEGIS_UID]] then
	AEGIS_UID = 3;
if [not [defined AEGIS_GID]] then
	AEGIS_GID = 3;
if [not [defined yacc]] then
	yacc = yacc;
if [not [defined libs]] then
	libs = ;
if [not [defined cc]] then
	cc = ['if' [find_command gcc] 'then' gcc 'else' cc];

/*
 * These options are added to the compile
 * of the relevant file.
 */
gonzo_flags =
	-D\'LIB\=\"[prefix]/lib/aegis\"\'
	-D\'AEGIS_USER_UID\=[AEGIS_UID]\'
	-D\'AEGIS_USER_GID\=[AEGIS_GID]\'
	;


/*
 * The default recipe
 */
all =
	[arch]/common/config.h
	[arch]/bin/aegis
	[arch]/bin/xaegis
	[arch]/Makefile
	;

if [in [arch] sun4] then
	all = [all] doc.targets;

/*
 * Integration builds also make the shar files for distribution.
 */
if [defined change] then
if [not [defined baseline]] then
if [in [arch] sun4] then
	all = [all] archive/Part.01.gz archive/[project].tar.gz
		archive/[project].patch.gz ;
	
all: [all]
	set default
{
	if [not [defined baseline]] then
	{
		set silent;
		echo "Integrator: please do the following:";
echo "\"  su1 sh -c 'chown root "[arch]"/bin/aegis && chmod u+s "[arch]"/bin/aegis'\"";
	}
}

/*
 * The source files.
 * This is given to us by aegis.
 */
vs_file = common/patchlevel.h;
change_files =
	[collect aegis -l chafil -ter -p [project] -c [change]]
	;
project_files =
	[collect aegis -l profil -ter -p [project] -c [change]]
	;
source_files =
	[sort [stringset [project_files] [change_files]]]
	;

version_obj = [arch]/common/version_stmp.o;
common_obj = [arch]/common/lib.a [version_obj];
common_lib =
	[stringset
		[fromto
			common/%.c
			[arch]/common/%.o
			[match_mask common/%.c [source_files]]
		]
	-
		[version_obj]
	];

aegis_obj =
	[sort
		[fromto
			aegis/%.def
			[arch]/aegis/%.o
			[match_mask aegis/%.def [source_files]]
		]
		[fromto
			aegis/%0%.y
			[arch]/aegis/%0%.gen.o
			[match_mask aegis/%0%.y [source_files]]
		]
		[fromto
			aegis/%0%.c
			[arch]/aegis/%0%.o
			[match_mask aegis/%0%.c [source_files]]
		]
	]
	[common_obj]
	;

fmtgen_obj =
	[fromto
		fmtgen/%0%.y
		[arch]/fmtgen/%0%.gen.o
		[match_mask fmtgen/%0%.y [source_files]]
	]
	[fromto
		fmtgen/%0%.c
		[arch]/fmtgen/%0%.o
		[match_mask fmtgen/%0%.c [source_files]]
	]
	[arch]/common/lib.a
	;

txt2c_obj =
	[fromto
		txt2c/%.y
		[arch]/txt2c/%.gen.o
		[match_mask txt2c/%.y [source_files]]
	]
	[fromto
		txt2c/%.c
		[arch]/txt2c/%.o
		[match_mask txt2c/%.c [source_files]]
	]
	[arch]/common/lib.a
	;

ssp_obj =
	[fromto
		ssp/%.c
		[arch]/ssp/%.o
		[match_mask ssp/%.c [source_files]]
	]
	[arch]/common/lib.a
	;

source_files_build =
	[collect ( aegis -l pf -p [project] -c [change] -unf ';'
		aegis -l cf -p [project] -c [change] -unf )
		| gawk "'/^build/{print $NF}'" ]
	;
source_files_non_build =
	[stringset [source_files] - [source_files_build]];

/*
 * how to compile C sources
 */
cc_flags = -O [debug];
cc_include_flags = ;

/*
 * this next section is for gcc
 *	comment it out if you don't have gcc
 *
 * The gcc include files MUST be first.
 */
if [in [cc] gcc] then
cc_flags = [cc_flags] -ansi -Wall -Wstrict-prototypes -Wmissing-prototypes
	-Wshadow -Wmissing-declarations -Wpointer-arith;

/*
 * include files from common
 */
cc_include_flags =
	[cc_include_flags]
	[prepost "-I" "/"[arch]"/common" [search_list]]
	[prepost "-I" "/common" [search_list]]
	;

/*
 * Build %1/%2.o from %1/%2.c
 */
[arch]/%1/%0%2.o: [arch]/%1/%0%2.c
{
	if [not [exists [dirname [target]]]] then
		mkdir -p [dirname [target]]
			set clearstat;
	if [exists [target]] then
		rm [target]
			set clearstat;
	if [defined %2_flags] then
		extra = [%2_flags];
	else
		extra = ;
	[cc] [cc_flags] [extra]
		[stringset
			[cc_include_flags]
			[prepost "-I" /[arch]/%1 [search_list]]
			[prepost "-I" "/%1" [search_list]]
		]
		-c [resolve [arch]/%1/%0%2.c]
		['if' [in gcc [cc]] 'then' -o [target]];
	if [not [in gcc [cc]]] then
		mv %2.o [target];
}

[arch]/%1/%0%2.o: %1/%0%2.c
{
	if [not [exists [dirname [target]]]] then
		mkdir -p [dirname [target]]
			set clearstat;
	if [exists [target]] then
		rm [target]
			set clearstat;
	if [defined %2_flags] then
		extra = [%2_flags];
	else
		extra = ;
	[cc] [cc_flags] [extra]
		[stringset
			[cc_include_flags]
			[prepost "-I" /[arch]/%1 [search_list]]
			[prepost "-I" "/%1" [search_list]]
		]
		-c [resolve %1/%0%2.c]
		['if' [in gcc [cc]] 'then' -o [target]];
	if [not [in gcc [cc]]] then
		mv %2.o [target];
}

%1/%0%2.d: [arch]/%1/%0%2.c
{
	if [not [exists [dirname [target]]]] then
		mkdir -p [dirname [target]]
			set clearstat;
	if [exists [target]] then
		rm [target]
			set clearstat;
	c_incl -nc -ns -eia
	    [stringset
		[cc_include_flags]
		[prepost "-I" /[arch]/%1 [search_list]]
		[prepost "-I" "/%1" [search_list]]
	    ]
	    -prefix "'[arch]/%1/%0%2.o %1/%0%2.c,M %1/%0%2.d: [arch]/%1/%0%2.c'"
	    -suffix "'set nodefault;'" [resolve [arch]/%1/%0%2.c]
		| sed [baseline_ed] [arch_ed]
		> [target];
}

%1/%0%2.d: %1/%0%2.c
{
	if [not [exists [dirname [target]]]] then
		mkdir -p [dirname [target]]
			set clearstat;
	if [exists [target]] then
		rm [target]
			set clearstat;
	c_incl -nc -ns -eia
	    [stringset
		[cc_include_flags]
		[prepost "-I" /[arch]/%1 [search_list]]
		[prepost "-I" "/%1" [search_list]]
	    ]
	    -prefix "'[arch]/%1/%0%2.o %1/%0%2.c,M %1/%0%2.d: %1/%0%2.c'"
	    -suffix "'set nodefault;'" [resolve %1/%0%2.c]
		| sed [baseline_ed] [arch_ed]
		> [target];
}

c-dep-files =
	[fromto %1/%0%2.c %1/%0%2.d [match_mask %1/%0%2.c [source_files]]]
	[fromto %1/%0%2.y %1/%0%2.gen.d [match_mask %1/%0%2.y [source_files]]]
	[fromto %1/%0%2.def %1/%0%2.d [match_mask %1/%0%2.def [source_files]]]
	;

[c-dep-files]: [arch]/common/config.h;

#include-cooked [c-dep-files]

/*
 * A few explicit things, to make sure the .d files
 * are constructed correctly.  Sigh.
 */

aegis/aeb.d: [arch]/aegis/cstate.h [arch]/aegis/pconf.h 
	[arch]/aegis/pstate.h [arch]/aegis/pattr.h 
	[arch]/aegis/ustate.h [arch]/aegis/uconf.h [arch]/man1/aeb.h; 
aegis/aeca.d: [arch]/aegis/cattr.h [arch]/aegis/cstate.h 
	[arch]/aegis/pconf.h [arch]/aegis/pstate.h [arch]/aegis/pattr.h 
	[arch]/aegis/ustate.h [arch]/aegis/uconf.h [arch]/man1/aeca.h; 
aegis/aecd.d: [arch]/aegis/cstate.h [arch]/aegis/pconf.h 
	[arch]/aegis/pstate.h [arch]/aegis/pattr.h 
	[arch]/aegis/ustate.h [arch]/aegis/uconf.h [arch]/man1/aecd.h; 
aegis/aechown.d: [arch]/aegis/cstate.h [arch]/aegis/pconf.h
	[arch]/aegis/pstate.h [arch]/aegis/pattr.h [arch]/aegis/ustate.h
	[arch]/aegis/uconf.h [arch]/man1/aechown.h;
aegis/aecp.d: [arch]/aegis/cstate.h [arch]/aegis/pconf.h 
	[arch]/aegis/pstate.h [arch]/aegis/pattr.h 
	[arch]/aegis/ustate.h [arch]/aegis/uconf.h [arch]/man1/aecp.h; 
aegis/aecpu.d: [arch]/aegis/cstate.h [arch]/aegis/pconf.h 
	[arch]/aegis/pstate.h [arch]/aegis/pattr.h 
	[arch]/aegis/ustate.h [arch]/aegis/uconf.h [arch]/man1/aecpu.h; 
aegis/aed.d: [arch]/aegis/cstate.h [arch]/aegis/pconf.h 
	[arch]/aegis/pstate.h [arch]/aegis/pattr.h 
	[arch]/aegis/ustate.h [arch]/aegis/uconf.h [arch]/man1/aed.h; 
aegis/aedb.d: [arch]/aegis/cstate.h [arch]/aegis/pconf.h 
	[arch]/aegis/common.h [arch]/aegis/pstate.h 
	[arch]/aegis/pattr.h [arch]/aegis/ustate.h [arch]/aegis/uconf.h 
	[arch]/man1/aedb.h; 
aegis/aedbu.d: [arch]/aegis/cstate.h [arch]/aegis/pconf.h 
	[arch]/aegis/common.h [arch]/aegis/pstate.h 
	[arch]/aegis/pattr.h [arch]/aegis/ustate.h [arch]/aegis/uconf.h 
	[arch]/man1/aedbu.h; 
aegis/aede.d: [arch]/aegis/cstate.h [arch]/aegis/pconf.h 
	[arch]/aegis/common.h [arch]/aegis/pstate.h 
	[arch]/aegis/pattr.h [arch]/aegis/ustate.h [arch]/aegis/uconf.h 
	[arch]/man1/aede.h; 
aegis/aedeu.d: [arch]/aegis/cstate.h [arch]/aegis/pconf.h 
	[arch]/aegis/common.h [arch]/aegis/pstate.h 
	[arch]/aegis/pattr.h [arch]/aegis/ustate.h [arch]/aegis/uconf.h 
	[arch]/man1/aedeu.h; 
aegis/aedn.d: [arch]/aegis/pattr.h [arch]/aegis/pstate.h [arch]/aegis/uconf.h
	[arch]/aegis/ustate.h [arch]/man1/aedn.h;
aegis/aeib.d: [arch]/aegis/cstate.h [arch]/aegis/pconf.h 
	[arch]/aegis/pstate.h [arch]/aegis/pattr.h 
	[arch]/aegis/ustate.h [arch]/aegis/uconf.h [arch]/man1/aeib.h; 
aegis/aeibu.d: [arch]/aegis/cstate.h [arch]/aegis/pconf.h 
	[arch]/aegis/pstate.h [arch]/aegis/pattr.h 
	[arch]/aegis/ustate.h [arch]/aegis/uconf.h [arch]/man1/aeibu.h; 
aegis/aeif.d: [arch]/aegis/cstate.h [arch]/aegis/pconf.h 
	[arch]/aegis/pstate.h [arch]/aegis/pattr.h 
	[arch]/aegis/ustate.h [arch]/aegis/uconf.h [arch]/man1/aeif.h; 
aegis/aeip.d: [arch]/aegis/cstate.h [arch]/aegis/pconf.h 
	[arch]/aegis/pstate.h [arch]/aegis/pattr.h 
	[arch]/aegis/ustate.h [arch]/aegis/uconf.h [arch]/man1/aeip.h; 
aegis/ael.d: [arch]/aegis/cstate.h [arch]/aegis/pconf.h 
	[arch]/aegis/gstate.h [arch]/aegis/pstate.h 
	[arch]/aegis/pattr.h [arch]/aegis/ustate.h [arch]/aegis/uconf.h 
	[arch]/man1/ael.h; 
aegis/aemv.d: [arch]/aegis/cstate.h [arch]/aegis/pconf.h 
	[arch]/aegis/pstate.h [arch]/aegis/pattr.h 
	[arch]/aegis/ustate.h [arch]/aegis/uconf.h [arch]/man1/aemv.h; 
aegis/aena.d: [arch]/aegis/pstate.h [arch]/aegis/pattr.h 
	[arch]/aegis/ustate.h [arch]/aegis/uconf.h [arch]/man1/aena.h; 
aegis/aenc.d: [arch]/aegis/cattr.h [arch]/aegis/cstate.h 
	[arch]/aegis/pconf.h [arch]/aegis/common.h 
	[arch]/aegis/pstate.h [arch]/aegis/pattr.h 
	[arch]/aegis/ustate.h [arch]/aegis/uconf.h [arch]/man1/aenc.h; 
aegis/aencu.d: [arch]/aegis/cattr.h [arch]/aegis/cstate.h 
	[arch]/aegis/pconf.h [arch]/aegis/common.h 
	[arch]/aegis/pstate.h [arch]/aegis/pattr.h 
	[arch]/aegis/ustate.h [arch]/aegis/uconf.h [arch]/man1/aencu.h; 
aegis/aend.d: [arch]/aegis/pstate.h [arch]/aegis/pattr.h 
	[arch]/aegis/ustate.h [arch]/aegis/uconf.h [arch]/man1/aend.h; 
aegis/aenf.d: [arch]/aegis/cstate.h [arch]/aegis/pconf.h 
	[arch]/aegis/pstate.h [arch]/aegis/pattr.h 
	[arch]/aegis/ustate.h [arch]/aegis/uconf.h [arch]/man1/aenf.h; 
aegis/aenfu.d: [arch]/aegis/cstate.h [arch]/aegis/pconf.h 
	[arch]/aegis/pstate.h [arch]/aegis/pattr.h 
	[arch]/aegis/ustate.h [arch]/aegis/uconf.h [arch]/man1/aenfu.h; 
aegis/aeni.d: [arch]/aegis/pstate.h [arch]/aegis/pattr.h 
	[arch]/aegis/ustate.h [arch]/aegis/uconf.h [arch]/man1/aeni.h; 
aegis/aenpr.d: [arch]/aegis/gstate.h [arch]/aegis/pstate.h 
	[arch]/aegis/pattr.h [arch]/aegis/ustate.h [arch]/aegis/uconf.h 
	[arch]/man1/aenpr.h; 
aegis/aenrls.d: [arch]/aegis/cstate.h [arch]/aegis/pconf.h 
	[arch]/aegis/gstate.h [arch]/aegis/pstate.h 
	[arch]/aegis/pattr.h [arch]/aegis/ustate.h [arch]/aegis/uconf.h 
	[arch]/man1/aenrls.h; 
aegis/aenrv.d: [arch]/aegis/pstate.h [arch]/aegis/pattr.h 
	[arch]/aegis/ustate.h [arch]/aegis/uconf.h [arch]/man1/aenrv.h; 
aegis/aent.d: [arch]/aegis/cstate.h [arch]/aegis/pconf.h 
	[arch]/aegis/pstate.h [arch]/aegis/pattr.h 
	[arch]/aegis/ustate.h [arch]/aegis/uconf.h [arch]/man1/aent.h; 
aegis/aentu.d: [arch]/aegis/cstate.h [arch]/aegis/pconf.h 
	[arch]/aegis/pstate.h [arch]/aegis/pattr.h 
	[arch]/aegis/ustate.h [arch]/aegis/uconf.h [arch]/man1/aentu.h; 
aegis/aepa.d: [arch]/aegis/pattr.h [arch]/aegis/pstate.h 
	[arch]/aegis/ustate.h [arch]/aegis/uconf.h [arch]/man1/aepa.h; 
aegis/aer.d: [arch]/man1/aer.h;	
aegis/aer/list.d: [arch]/aegis/rptidx.h;
aegis/aer/parse.d: [arch]/aegis/rptidx.h;
aegis/aera.d: [arch]/aegis/pstate.h [arch]/aegis/pattr.h 
	[arch]/aegis/ustate.h [arch]/aegis/uconf.h [arch]/man1/aera.h; 
aegis/aerd.d: [arch]/aegis/pstate.h [arch]/aegis/pattr.h 
	[arch]/aegis/ustate.h [arch]/aegis/uconf.h [arch]/man1/aerd.h; 
aegis/aerf.d: [arch]/aegis/cstate.h [arch]/aegis/pconf.h 
	[arch]/aegis/pstate.h [arch]/aegis/pattr.h 
	[arch]/aegis/ustate.h [arch]/aegis/uconf.h [arch]/man1/aerf.h; 
aegis/aeri.d: [arch]/aegis/pstate.h [arch]/aegis/pattr.h 
	[arch]/aegis/ustate.h [arch]/aegis/uconf.h [arch]/man1/aeri.h; 
aegis/aerm.d: [arch]/aegis/cstate.h [arch]/aegis/pconf.h 
	[arch]/aegis/pstate.h [arch]/aegis/pattr.h 
	[arch]/aegis/ustate.h [arch]/aegis/uconf.h [arch]/man1/aerm.h; 
aegis/aermpr.d: [arch]/aegis/cstate.h [arch]/aegis/pconf.h 
	[arch]/aegis/gstate.h [arch]/aegis/pstate.h 
	[arch]/aegis/pattr.h [arch]/aegis/ustate.h [arch]/aegis/uconf.h 
	[arch]/man1/aermpr.h; 
aegis/aermu.d: [arch]/aegis/cstate.h [arch]/aegis/pconf.h 
	[arch]/aegis/pstate.h [arch]/aegis/pattr.h 
	[arch]/aegis/ustate.h [arch]/aegis/uconf.h [arch]/man1/aermu.h; 
aegis/aerp.d: [arch]/aegis/cstate.h [arch]/aegis/pconf.h 
	[arch]/aegis/pstate.h [arch]/aegis/pattr.h 
	[arch]/aegis/ustate.h [arch]/aegis/uconf.h [arch]/man1/aerp.h; 
aegis/aerpu.d: [arch]/aegis/cstate.h [arch]/aegis/pconf.h 
	[arch]/aegis/pstate.h [arch]/aegis/pattr.h 
	[arch]/aegis/ustate.h [arch]/aegis/uconf.h [arch]/man1/aerpu.h; 
aegis/aerrv.d: [arch]/aegis/pstate.h [arch]/aegis/pattr.h 
	[arch]/aegis/ustate.h [arch]/aegis/uconf.h [arch]/man1/aerrv.h; 
aegis/aet.d: [arch]/aegis/cstate.h [arch]/aegis/pconf.h 
	[arch]/aegis/pstate.h [arch]/aegis/pattr.h 
	[arch]/aegis/ustate.h [arch]/aegis/uconf.h [arch]/man1/aet.h; 
aegis/aev.d: [arch]/man1/aev.h;	
aegis/change.d: [arch]/aegis/cstate.h [arch]/aegis/pconf.h 
	[arch]/aegis/pstate.h [arch]/aegis/pattr.h 
	[arch]/aegis/ustate.h [arch]/aegis/uconf.h; 
aegis/gonzo.d: [arch]/aegis/gstate.h [arch]/aegis/pstate.h 
	[arch]/aegis/pattr.h [arch]/aegis/ustate.h
	[arch]/aegis/uconf.h; 
aegis/help.d: [arch]/aegis/gstate.h [arch]/man1/o__rules.h 
	[arch]/man1/o_anticip.h [arch]/man1/o_auto.h
	[arch]/man1/o_baselin.h [arch]/man1/o_bld_lk.h
	[arch]/man1/o_change.h [arch]/man1/o_devdir.h
	[arch]/man1/o_dir.h [arch]/man1/o_edit.h [arch]/man1/o_file.h
	[arch]/man1/o_help.h [arch]/man1/o_indep.h
	[arch]/man1/o_interact.h [arch]/man1/o_keep.h
	[arch]/man1/o_lib.h [arch]/man1/o_list.h [arch]/man1/o_major.h
	[arch]/man1/o_manual.h [arch]/man1/o_min.h
	[arch]/man1/o_minor.h [arch]/man1/o_nolog.h
	[arch]/man1/o_overw.h [arch]/man1/o_page.h
	[arch]/man1/o_project.h [arch]/man1/o_regress.h
	[arch]/man1/o_symlnk.h [arch]/man1/o_terse.h
	[arch]/man1/o_unforma.h [arch]/man1/o_user.h
	[arch]/man1/o_verbose.h [arch]/man1/z_exit.h
	[arch]/man1/z_intuit.h;
aegis/lock.d: [arch]/aegis/gstate.h;
aegis/log.d: [arch]/aegis/ustate.h [arch]/aegis/uconf.h;
aegis/main.d: [arch]/aegis/cattr.h [arch]/man1/aegis.h;
aegis/project.d: [arch]/aegis/cstate.h [arch]/aegis/pconf.h 
	[arch]/aegis/gstate.h [arch]/aegis/pstate.h 
	[arch]/aegis/pattr.h [arch]/aegis/ustate.h 
	[arch]/aegis/uconf.h; 
aegis/sub.d: [arch]/aegis/cstate.h [arch]/aegis/pconf.h 
	[arch]/aegis/gstate.h [arch]/aegis/pstate.h 
	[arch]/aegis/pattr.h; 
aegis/user.d: [arch]/aegis/gstate.h [arch]/aegis/pstate.h 
	[arch]/aegis/pattr.h [arch]/aegis/ustate.h 
	[arch]/aegis/uconf.h; 

aegis/lex.d:	aegis/gram.gen.h;
fmtgen/lex.d:	fmtgen/parse.gen.h;
aegis/aer/lex.d: aegis/aer/report.gen.h;

/*
 * How to use yacc sources.
 */

yacc_flags = ;

%1/%0%2.gen.c %1/%0%2.gen.h: %1/%0%2.y
{
	if [not [exists [dirname [target]]]] then
		mkdir -p [dirname [target]]
			set clearstat;
	rm -f %1/%0%2.list y.output
		set silent;
	if [exists %1/%0%2.gen.c] then
		rm %1/%0%2.gen.c
			set clearstat;
	if [exists %1/%0%2.gen.h] then
		rm %1/%0%2.gen.h
			set clearstat;
	[yacc] -d [yacc_flags] [resolve %1/%0%2.y];
	sed "'s/[yY][yY]/%2_/g'" < y.tab.c > %1/%0%2.gen.c;
	rm y.tab.c;
	sed "'s/[yY][yY]/%2_/g'" < y.tab.h > %1/%0%2.gen.h;
	rm y.tab.h;
	if [exists y.output] then
		mv y.output %1/%0%2.list
			set clearstat;
}

[arch]/bin/%: script/%.tcl
{
	if [not [exists [dirname [target]]]] then
		mkdir -p [dirname [target]]
			set clearstat;
	cp [resolve [need]] [target];
	chmod 755 [target];
}

ranlib = [find_command ranlib];

[arch]/common/lib.a: [common_lib]
{
	if [not [exists [dirname [target]]]] then
		mkdir -p [dirname [target]]
			set clearstat;
	if [exists [target]] then
		rm [target]
			set clearstat;
	ar qc [target] [resolve [common_lib]];
	if [ranlib] then
		[ranlib] [target];
}


/*
 * build the programs from their objects
 */

[arch]/bin/%: [%_obj]
{
	if [not [exists [dirname [target]]]] then
		mkdir -p [dirname [target]]
			set clearstat;
	if [exists [target]] then
		rm [target]
			set clearstat;
	[cc] -o [target] [resolve [%_obj]] [libs];

	chmod 755 [target];

	/*
	 * aegis itself must be set-uid-root
	 */
	if [defined baseline] then
	if [in [target] [arch]/bin/aegis] then
	{
		su1 sh -c "'chown root "[target]" && chmod u+s "[target]"'"
			set errok;
	}
}


/*
 * building things which require fmtgen to build
 *
 * Build %.c and %.h from %.def
 */

[arch]/%1/%0%2.c [arch]/%1/%0%2.h: %1/%0%2.def: [arch]/bin/fmtgen
{
	if [not [exists [dirname [target]]]] then
		mkdir -p [dirname [target]]
			set clearstat;
	if [exists [arch]/%1/%0%2.c] then
		rm [arch]/%1/%0%2.c
			set clearstat;
	if [exists [arch]/%1/%0%2.h] then
		rm [arch]/%1/%0%2.h
			set clearstat;
	[resolve [arch]/bin/fmtgen] [prepost "-I" "/%1" [search_list]]
		[resolve %1/%0%2.def] [arch]/%1/%0%2.c [arch]/%1/%0%2.h;
}

%1/%0%2.dd: %1/%0%2.def
{
	if [not [exists [dirname [target]]]] then
		mkdir -p [dirname [target]]
			set clearstat;
	if [exists [target]] then
		rm [target]
			set clearstat;
	c_incl -nc -ns -eia
	    [stringset [cc_include_flags] [prepost "-I" "/%1" [search_list]]]
	    -prefix "'[arch]/%1/%0%2.c [arch]/%1/%0%2.h %1/%0%2.def,M %1/%0%2.dd:'"
	    -suffix "'set nodefault;'" [resolve %1/%0%2.def]
		| sed [baseline_ed] [arch_ed]
		> [target];
}

def-dep-files =
	[fromto %1/%2.def %1/%2.dd [match_mask %1/%2.def [source_files]]]
	;

#include-cooked [def-dep-files]


/*
 * building things which require txt2c to build
 *
 * Build %.h from %.1
 */

[arch]/man1/%.h: man1/%.1: [arch]/bin/txt2c
{
	if [not [exists [dirname [target]]]] then
		mkdir -p [dirname [target]]
			set clearstat;
	if [exists [target]] then
		rm [target]
			set clearstat;
	[resolve [arch]/bin/txt2c] [resolve man1/%.1] [target];
}

[arch]/man1/%.h: man1/%.so: [arch]/bin/txt2c
{
	if [not [exists [dirname [target]]]] then
		mkdir -p [dirname [target]]
			set clearstat;
	if [exists [target]] then
		rm [target]
			set clearstat;
	[resolve [arch]/bin/txt2c] [resolve man1/%.so] [target];
}

/*
 * The version stamp is to be updated for every 
 * integration and development build.
 */

copyright_years =
	[collect
		aegis -list version -p [project] -c [change]
		| gawk "-F'[[\\\\]]'" "'/^copyright_years/{print $2}'"
	];

if [not [exists [vs_file]]] then
{
	if [not [exists [dirname [vs_file]]]] then
		mkdir -p [dirname [vs_file]]
			set clearstat;
	echo "'#define PATCHLEVEL \""[version]"\"'" > [vs_file]
		set clearstat;
	echo "'#define COPYRIGHT_YEARS \""[copyright_years]"\"'" >> [vs_file];
}

#ifndef baseline
if [not [exists doc/version.so]] then
{
	if [not [exists doc]] then
		mkdir doc
			set clearstat;
	echo \".ds V) [version]\" > doc/version.so
		set clearstat;
	echo \".ds v) [version_short]\" >> doc/version.so;
	aegis -list version -p [project] -c [change]
		| gawk -F'\'"\'' "'/previous/{print $2}'"
		| gawk -F. "'{print \".ds w) \"$1\".\"$2}'"
		>> doc/version.so;
	echo \".ds Y) [copyright_years]\" >> doc/version.so;
	cooktime -m 2-Jan-70 doc/version.so;
}

if [not [exists aux/new.so]] then
{
	if [not [exists aux]] then
		mkdir aux
			set clearstat;
	echo \"[version]\"
		| gawk -F. "'{print \".so new.\"$1\".\"$2\".so\"}'"
		> aux/new.so
		set clearstat;
	cooktime -m 2-Jan-70 aux/new.so;
}
#endif


/*
 * These recipes build a Makefile for a user.  They do not build a
 * Makefile useful for a development build, because no arch
 * information is included in the Makefile.
 */

makefile-per-file = [prepost "" ",M" [source_files]];

Makefile.in: aux/Makefile.head aux/Makefile.sh aux/Makefile.awk [vs_file]
	[makefile-per-file]
{
	if [exists [target]] then
		rm [target]
			set clearstat;
	cat [resolve aux/Makefile.head [makefile-per-file]] > [target];
	sh [resolve aux/Makefile.sh] [source_files]
		| gawk -f [resolve aux/Makefile.awk]
		>> [target];
}

%0%,M: aux/Makefi.file.sh aux/Makefile.awk
{
	if [not [exists [dirname [target]]]] then
		mkdir -p [dirname [target]]
			set clearstat;
	if [exists [target]] then
		rm [target]
			set clearstat;
	sh [resolve aux/Makefi.file.sh] %0% [resolve %0%]
		| gawk -f [resolve aux/Makefile.awk]
		> [target];
}

/*
 * formatting documents and manual entries
 */
doc.targets: cat txt special;

/*
 * manual entries
 */
cat =
	[fromto man%1/%2.%1 cat%1/%2.%1 [match_mask man%1/%2.%1 [source_files]]]
	/*
	[fromto man1/%.1 man1/%.h [match_mask man1/%.1 [source_files]]]
	[fromto man1/%.so man1/%.h [match_mask man1/%.so [source_files]]]
	*/
	;
cat: [cat];

cat%1/%2.%1: man%1/%2.%1
{
	if [not [exists cat%1]] then
		mkdir cat%1
			set clearstat;
	if [exists [target]] then
		rm [target]
			set clearstat;
	roffpp [prepost "-I" "/man%1" [search_list]] [resolve man%1/%2.%1]
		| groff -Tascii -P-h -t -man > cat%1/%2.%1; 
}

man%1/%2.d: man%1/%2.%1
{
	if [not [exists [dirname [target]]]] then
		mkdir -p [dirname [target]]
			set clearstat;
	if [exists [target]] then
		rm [target]
			set clearstat;
	c_incl -nc -ns -eia -r
	    [stringset [cc_include_flags] [prepost "-I" "/man%1" [search_list]]]
	    -prefix "'cat%1/%2.%1 man%1/%2.%1,M man%1/%2.d: man%1/%2.%1'"
	    -suffix "'set nodefault;'" [resolve man%1/%2.%1]
		| sed [baseline_ed] [arch_ed] > [target];
}

man-dep-files =
	[fromto man%1/%2.%1 man%1/%2.d [match_mask man%1/%2.%1 [source_files]]]
	;

#include-cooked [man-dep-files]


/*
 * user manuals
 */

txt =
	[fromto doc/%.ms doc/%.ps.gz [match_mask doc/%.ms [source_files]]]
	[fromto doc/%.mm doc/%.ps.gz [match_mask doc/%.mm [source_files]]]
	;
txt: [txt];

doc/%.ps.gz: doc/%.ms
{
	if [not [exists doc]] then
		mkdir doc
			set clearstat;
	if [exists [target]] then
		rm -f [target]
			set clearstat;
	roffpp [prepost "-I" "/doc" [search_list]] [resolve doc/%.ms]
		| groff -p -t -ms | gzip > [target];
}

doc/%.ps.gz: doc/%.mm
{
	if [not [exists doc]] then
		mkdir doc
			set clearstat;
	if [exists [target]] then
		rm -f [target]
			set clearstat;
	roffpp [prepost "-I" "/doc" [search_list]] [resolve doc/%.mm]
		| groff -p -t -mm | gzip > [target];
}

doc/%.d: doc/%.ms
{
	if [not [exists [dirname [target]]]] then
		mkdir -p [dirname [target]]
			set clearstat;
	if [exists [target]] then
		rm [target]
			set clearstat;
	c_incl -nc -ns -eia -r
	    [stringset [cc_include_flags] [prepost "-I" "/doc" [search_list]]]
	    -prefix "'doc/%.ps.gz doc/%.ms,M doc/%.d: doc/%.ms'"
	    -suffix "'set nodefault;'" [resolve doc/%.ms]
		| sed [baseline_ed] [arch_ed] > [target];
}

doc/%.d: doc/%.mm
{
	if [not [exists [dirname [target]]]] then
		mkdir -p [dirname [target]]
			set clearstat;
	if [exists [target]] then
		rm [target]
			set clearstat;
	c_incl -nc -ns -eia -r
	    [stringset [cc_include_flags] [prepost "-I" "/doc" [search_list]]]
	    -prefix "'doc/%.ps.gz doc/%.mm,M doc/%.d: doc/%.mm'"
	    -suffix "'set nodefault;'" [resolve doc/%.mm]
		| sed [baseline_ed] [arch_ed] > [target];
}

doc-dep-files =
	[fromto doc/%.ms doc/%.d [match_mask doc/%.ms [source_files]]]
	[fromto doc/%.mm doc/%.d [match_mask doc/%.mm [source_files]]]
	;

#include-cooked [doc-dep-files]


/*
 * specials
 */

special: [fromto aux/%.man % [match_mask aux/%.man [source_files]]]
	[fromto aux/%.roff archive/[project].% [match_mask aux/%.roff
		[source_files]]]
	;

%: aux/%.man
{
	if [exists [target]] then
		rm -f [target]
			set clearstat;
	roffpp [prepost "-I" "/aux" [search_list]] [resolve aux/%.man]
		| groff -Tascii -P-hub -t -man > [target]; 
}

aux/%.d: aux/%.man
{
	if [not [exists [dirname [target]]]] then
		mkdir -p [dirname [target]]
			set clearstat;
	if [exists [target]] then
		rm [target]
			set clearstat;
	c_incl -nc -ns -eia -r
	    [stringset [cc_include_flags] [prepost "-I" "/aux" [search_list]]]
	    -prefix "'% aux/%.man,M aux/%.d: aux/%.man'"
	    -suffix "'set nodefault;'" [resolve aux/%.man]
		| sed [baseline_ed] [arch_ed] > [target];
}

aux-dep-files =
	[fromto aux/%.man aux/%.d [match_mask aux/%.man [source_files]]]
	;

#include-cooked [aux-dep-files]


source_file_order =
	README
	[sort
		[stringset
			[source_files]
			aux/CHANGES.[version_short]
		-
			README
		]
	]
	;

archive/Part.01.gz: [source_file_order]
{
	if [not [exists archive]] then
		mkdir archive
			set clearstat;
	parts = [glob "archive/Part*"];
	if [parts] then
		rm [parts]
			set clearstat;
	/* assumes shar.3.49 available */
	shar -n[project] -a -c -oarchive/Part -L200
		-s "'Peter Miller <pmiller@agso.gov.au>'"
		[resolve [source_file_order]];
	gzip -v archive/Part*;
}

archive/[project].tar.gz: [source_file_order]
{
	if [not [exists archive]] then
		mkdir archive
			set clearstat;
	if [exists [target]] then
		rm [target]
			set clearstat;
	if [exists archive/[project].tar] then
		rm archive/[project].tar
			set clearstat;
	tar cf - [resolve [source_file_order]] | tardy -unu 0 -gnu 0
	-una Peter -gna Miller -p [project] -ms 0644 -mc 07022 -now
		> archive/[project].tar;
	gzip -v archive/[project].tar;
}

patch_files = [fromto %0% %0%,P [source_files] aux/CHANGES.[version_short]];
patch_files = [vs_file],P [stringset [patch_files] - [vs_file],P];

archive/[project].patch.gz: [patch_files]
{
	if [not [exists archive]] then
		mkdir archive
			set clearstat;
	if [exists [target]] then
		rm [target]
			set clearstat;
	if [exists archive/[project].patch] then
		rm archive/[project].patch
			set clearstat;
	sh [resolve aux/patches.sh] [resolve [patch_files]]
		> archive/[project].patch;
	gzip -v archive/[project].patch;
}

[vs_file],P: [vs_file]
{
	echo "Index:" [vs_file] > [target];
	prev =
		[collect
			aegis -list version -p [project] -c [change]
			| gawk -F"'\"'" "'/previous/{print $2}'"
		];
	echo "'Prereq: \""[prev]"\"'" >> [target];
	echo "'#define PATCHLEVEL \""[prev]"\"'" |
	diff -c - [vs_file] | sed '1,2d' >> [target];
}

%0%,P: %0%
	if [exists [resolve %0%]]
{
	if [exists [target]] then
		rm [target]
			set clearstat;
	if [not [exists [dirname [target]]]] then
		mkdir -p [dirname [target]]
			set clearstat;
	aegis -cp %0% -delta 1 -output patch.orig -p [project] -c [change]
		|| cp /dev/null patch.orig;
	sh [resolve aux/patch.fil.sh] patch.orig [resolve %0%] %0% > [target];
	rm patch.orig;
}

aux/CHANGES.[version_short]: aux/CHANGES.sh [vs_file]
{
	if [exists [target]] then
		rm [target]
			set clearstat;
	sh [resolve aux/CHANGES.sh] [project] > [target];
}

MANIFEST: aux/MANIFEST.sh [vs_file]
{
	if [exists [target]] then
		rm [target]
			set clearstat;
	sh [resolve aux/MANIFEST.sh [source_file_order]] > [target];
}


configure: aux/configure.in
{
	if [exists [target]] then
		rm [target]
			set clearstat;
	autoconf [resolve aux/configure.in] > [target];
	chmod 755 [target];
}


[arch]/config.status: configure
{
	if [not [exists [arch]]] then
		mkdir -p [arch]
			set clearstat;
	if [exists [target]] then
		rm [target]
			set clearstat;
	./[resolve configure] --verbose --no-create;
	mv config.status [arch]/config.status;
}

common/config.h.in: aux/configure.in aux/config.h.in
	aux/config.h.in1 aux/config.h.in2
{
	if [not [exists common]] then
		mkdir common
			set clearstat;
	if [exists [target]] then
		rm [target]
			set clearstat;
	if [exists acconfig.h] then
		rm acconfig.h
			set clearstat;
	cat [resolve aux/config.h.in1] > [target];
	ln -s [resolve aux/config.h.in] acconfig.h;
	autoheader [resolve aux/configure.in] >> [target];
	rm acconfig.h;
	cat [resolve aux/config.h.in2] >> [target];
}


[arch]/common/config.h: common/config.h.in [arch]/config.status
{
	if [not [exists [dirname [target]]]] then
		mkdir -p [dirname [target]]
			set clearstat;
	if [not [exists common]] then
		mkdir common
			set clearstat;
	if [not [exists common/config.h.in]] then
	{
		/*
		 * The common/config.h.in file needs to be available relative
		 * to the current directory.  If cook says it is up-to-date,
		 * then it must be in the baseline.  Bring it into the
		 * development directory.
		 */
		cp [baseline]/common/config.h.in common/config.h.in
			set clearstat;
	}
	if [exists [target]] then
		rm [target]
			set clearstat;
	[resolve [arch]/config.status] --only common/config.h;
	mv common/config.h [target];
}
[arch]/aux/Howto.conf: aux/Howto.conf.in [arch]/config.status
{
	if [not [exists [dirname [target]]]] then
		mkdir -p [dirname [target]]
			set clearstat;
	if [not [exists aux]] then
		mkdir aux
			set clearstat;
	if [not [exists aux/Howto.conf.in]] then
	{
		/*
		 * The aux/Howto.conf.in file needs to be available relative
		 * to the current directory.  If cook says it is up-to-date,
		 * then it must be in the baseline.  Bring it into the
		 * development directory.
		 */
		cp [baseline]/aux/Howto.conf.in aux/Howto.conf.in
			set clearstat;
	}
	if [exists [target]] then
		rm [target]
			set clearstat;
	[resolve [arch]/config.status] --only aux/Howto.conf;
	mv aux/Howto.conf [target];
}

[arch]/Makefile: Makefile.in [arch]/config.status
{
	if [not [exists [dirname [target]]]] then
		mkdir -p [dirname [target]]
			set clearstat;
	if [not [exists Makefile.in]] then
	{
		/*
		 * The Makefile.in file needs to be available relative
		 * to the current directory.  If cook says it is up-to-date,
		 * then it must be in the baseline.  Bring it into the
		 * development directory.
		 */
		cp [baseline]/Makefile.in Makefile.in
			set clearstat;
	}
	if [exists [target]] then
		rm [target]
			set clearstat;
	[resolve [arch]/config.status] --only Makefile;
	mv Makefile [target];
}


/*
 * Make sure this directory is here,
 * otherwise the "../man1/?????.h" include files will
 * be found in the baseline.
 */
#ifdef baseline
if [not [exists [arch]/common]] then
	mkdir -p [arch]/common
		set clearstat;
#endif

archive/[project].%: aux/%.roff: [arch]/bin/ssp
{
	if [not [exists [dirname [target]]]] then
		mkdir -p [dirname [target]]
			set clearstat;
	if [exists [target]] then
		rm [target]
			set clearstat;
	roffpp [prepost "-I" "/aux" [search_list]] [resolve aux/%.roff] |
		groff -Tascii -t -P-hub | [resolve [arch]/bin/ssp] - [target];
}


aux/faq.toc.so: aux/faq.roff aux/faq.toc.awk
{
	if [not [exists [dirname [target]]]] then
		mkdir -p [dirname [target]]
			set clearstat;
	if [exists [target]] then
		rm [target]
			set clearstat;
	gawk -f [resolve aux/faq.toc.awk aux/faq.roff] > [target];
}

/*
 * Extra stuff to make it work, despite the
 * automatic include file groping.  Sigh.
 */
archive/[project].faq: aux/faq.toc.so;
